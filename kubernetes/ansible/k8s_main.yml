---
- name: Remove swapfile from /etc/fstab
  ansible.posix.mount:
    name: "{{ item }}"
    fstype: swap
    state: absent
  loop:
    - swap
    - none

- name: Check swap
  command: /sbin/swapon -s
  register: swapon
  changed_when: no

- name: Disable swap
  command: /sbin/swapoff -a
  when:
    - swapon.stdout
  ignore_errors: "{{ ansible_check_mode }}"

- name: Disable swap in fstab (Kubeadm requirement)
  lineinfile:
    dest: /etc/fstab
    regexp: swap
    state: absent

- name: Create an empty file for the Containerd module
  copy:
    content: ""
    dest: /etc/modules-load.d/containerd.conf
    force: no

- name: Configure modules for Containerd
  blockinfile:
    path: /etc/modules-load.d/containerd.conf
    block: |
          overlay
          br_netfilter

- name: Create an empty file for Kubernetes sysctl params
  copy:
    content: ""
    dest: /etc/sysctl.d/99-kubernetes-cri.conf
    force: no

- name: Configure sysctl params for Kubernetes
  lineinfile:
    path: /etc/sysctl.d/99-kubernetes-cri.conf
    line: "{{ item }}"
  with_items:
    - 'net.ipv4.ip_forward = 1'
    - 'net.bridge.bridge-nf-call-iptables = 1'
    - 'net.bridge.bridge-nf-call-ip6tables = 1'

- name: Load br_netfilter kernel module
  modprobe:
    name: br_netfilter
    state: present

- name: Let iptables see bridged traffic.
  sysctl:
    name: "{{ item }}"
    value: '1'
    state: present
  loop:
    - net.ipv4.ip_forward
    - net.bridge.bridge-nf-call-iptables
    - net.bridge.bridge-nf-call-ip6tables

- name: Verify system variables are set
  command: sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward
  register: sysctl_status

- debug:
    msg: "{{ sysctl_status.stdout }}"

- name: Add Kubernetes APT key
  apt_key:
    url: "{{ kubernetes_apt_repository_key }}"
    state: present
    keyring: /etc/apt/trusted.gpg.d/k8s.gpg

- name: Add Kubernetes' APT repository
  apt_repository:
    repo: "{{ kubernetes_apt_repository }}"
    state: present
    filename: 'kubernetes'

- name: Configure containerd
  file:
    path: /etc/containerd
    state: directory

- name: Configure containerd
  shell: /usr/bin/containerd config default > /etc/containerd/config.toml

- name: Configuring the systemd cgroup driver for containerd
  replace:
    path: /etc/containerd/config.toml
    regexp: '(SystemdCgroup) = false'
    replace: '\1 = true'
    backup: yes
  changed_when: false
  register: containerd_config

- name: Add the systemd cgroup driver for containerd
  lineinfile:
    dest: /etc/containerd/config.toml
    insertafter: 'plugins.*\.containerd\.runtimes\.runc\.options'
    line: "            SystemdCgroup = true"
  when: containerd_config.changed == false

- name: Show the file content
  shell: grep -A1 '.containerd.runtimes.runc.options' /etc/containerd/config.toml

- name: Enable containerd service, and start it
  systemd:
    name: containerd
    state: restarted
    enabled: yes
    daemon-reload: yes

- name: Installing kubernetes
  apt:
    name:
      - kubeadm={{ kubernetes_version }}.*
      - kubectl={{ kubernetes_version }}.*
      - kubelet={{ kubernetes_version }}.*
    state: present

- name: Enable service kubelet
  service:
    name: kubelet
    enabled: yes

- name: Check Kubelet args in Kubelet config
  shell: grep "^Environment=\"KUBELET_EXTRA_ARGS=" /etc/systemd/system/kubelet.service.d/10-kubeadm.conf || true
  register: check_args

- name: Add runtime args in Kubelet config
  lineinfile:
    dest: "/etc/systemd/system/kubelet.service.d/10-kubeadm.conf"
    line: "Environment=\"KUBELET_EXTRA_ARGS= --runtime-cgroups=/system.slice/containerd.service --container-runtime-endpoint=unix:///run/containerd/containerd.sock\""
    insertafter: '\[Service\]'
  when: check_args.stdout == ""

- name: Prevent kubernetes from being upgraded
  become: true
  with_items: ['kubelet','kubeadm','kubectl']
  dpkg_selections:
    name: '{{ item }}'
    selection: hold

- name: Reboot all the kubernetes nodes
  reboot:
    post_reboot_delay: 10
    reboot_timeout: 40
    connect_timeout: 60
    test_command: uptime

- pause: seconds=30
